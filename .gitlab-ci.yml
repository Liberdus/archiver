# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

# Include security-related templates
include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

# Define the default Docker image for all jobs
image: registry.gitlab.com/shardus/dev-container

# Define global cache settings for all jobs
cache:
  key: '$CI_COMMIT_REF_SLUG-node-modules'
  paths:
    - node_modules/

# Define the stages for the pipeline
stages:
  - prepare
  - build
  - appsec
  - test

# Prepare Job: Install Node.js dependencies
prepare-job:
  stage: prepare
  script:
    - npm ci

# Build Job: Compiles the code
compile-job:
  stage: build
  needs: ['prepare-job']
  script:
    - echo "Running Compiler..."
    - npm run compile
    - echo "Compilation complete."

# Format Checker Job: Runs Prettier for code formatting
format-checker-job:
  stage: build
  needs: ['prepare-job']
  script:
    - echo "Running Prettier..."
    - npm run format-check
    - echo "Running Prettier complete."

# Lint Checker Job: Runs ESlint for code linting
lint-checker-job:
  stage: build
  needs: ['prepare-job']
  script:
    - echo "Running ESlint..."
    - npm run lint
    - echo "Running ESlint complete."

secret-scanner-working-directory:
  stage: appsec
  image: python:3.9
  before_script:
    - if [ -z "${APPSEC_SECRETS_EXCLUDE_DIR}" ]; then EXCLUDE_DIR=""; else EXCLUDE_DIR=" --exclude-files '$APPSEC_SECRETS_EXCLUDE_DIR' "; fi
    - if [ -f .appsec/secrets.baseline ]; then OPTS="--baseline .appsec/secrets.baseline --exclude-files .appsec/secrets.baseline"; else OPTS=""; fi
    - export CMD="git ls-files -z | xargs -0 detect-secrets-hook $OPTS $EXCLUDE_DIR"
  script:
    - pip install detect-secrets
    - bash -c "$CMD"

secret-scanner-git-repo:
  stage: appsec
  image:
    name: "trufflesecurity/trufflehog:latest"
    entrypoint: [""]
  script:
    - trufflehog filesystem --only-verified --fail .

# SAST Job: Performs static application security testing
sast:
  variables:
    SAST_EXCLUDED_ANALYZERS: bandit, brakeman, flawfinder, gosec, kubesec, phpcs-security-audit, pmd-apex, security-code-scan, semgrep, sobelow, spotbugs
  stage: test
